@label("Financeiro")
domain financeiro

@label("Contas a receber")
service contas_receber { //xxxx
	
	
	config {
		groupId: "br.com.kerubin.api"
		version: "1.0.0"
		cloudConfigUri: "http://localhost:9091"
		servicePort: 0
		messagingCore {version:"1.0.0"}
		databaseCore {version:"1.0.0"}
	}
	
	dependency {
		groupId: "br.com.kerubin.api"
		artifactId: "financeiro-planocontas-client"
		version: "1.0.0" 
	}
	
	dependency {
		groupId: "br.com.kerubin.api"
		artifactId: "cadastros-banco-client"
		version: "1.0.0" 
	}
	
	dependency {
		groupId: "br.com.kerubin.api"
		artifactId: "cadastros-cliente-client"
		version: "1.0.0" 
	}
	
	
	@auditing
	@label("Contas a receber")
	///@publishEvents(events=[updated])
	entity ContaReceber {
		
		planoContas: refers PlanoConta manyToOne
		// listFilter(many: "Plano de Contas")
		web(styleClass: "ui-md-6")
		publishedInEvents
		
		descricao: string
		label: "Descrição da conta"
		listFilter(many: "Contas")
		web(styleClass: "ui-md-6")
		publishedInEvents
		//--
		
		dataVencimento: date
		label: "Vencimento"
		listFilter(between: "Vencimento de;Até;Intervalo de tempo")  
		web(styleClass: "ui-md-2")
		sort: asc
		
		valor: money 
		label: "Valor da conta"
		sum(styleClass:"kb-conta-valor-apagar" label:"A")
		web(styleClass: "ui-md-2")
		listFilter(between: "Contas com valores de;até;" styleClass: "ui-md-3")
		
		formaPagamento: FormaPagamento
		label: "Forma de pagamento"
		web(styleClass: "ui-md-2")
		publishedInEvents
		listFilter(isEqualTo: "Forma de pagamento" styleClass: "ui-md-4")
		//--
				
		
		//--
		contaBancaria: refers ContaBancaria? manyToOne 
		grid(hidden)
		label: "Dados da conta bancária"
		web(styleClass: "ui-md-6")
		publishedInEvents
		
		cartaoCredito: refers CartaoCredito? manyToOne
		label: "Dados do cartão de crédito"
		grid(hidden)
		web(styleClass: "ui-md-6")
		publishedInEvents
		
		outrosDescricao: string?
		label: "Dados complementares"
		web(styleClass: "ui-md-6")
		grid(hidden)
		//--
		
		//--
		dataPagamento: date? 
		label: "Data pagamento"
		listFilter(isNotNull_isNull: "Pagas;Em aberto" default:"isNull") 
		web(styleClass: "ui-md-2")
		publishedInEvents
		
		valorDesconto: money? 
		sum
		label: "Descontos"
		grid(hidden ) 
		web(styleClass: "ui-md-2")
		
		valorMulta: money? 
		sum
		label: "Multas"
		grid(hidden) 
		web(styleClass: "ui-md-2")
		
		valorJuros: money? 
		sum
		label: "Juros mora"
		grid(hidden) 
		web(styleClass: "ui-md-2")
		
		valorAcrescimos: money? 
		sum
		label: "Acréscimos"
		grid(hidden) 
		web(styleClass: "ui-md-2")
		
		valorPago: money? 
		sum(styleClass:"kb-conta-valor-pago" label:"B")
		label: "Valor pago"
		web(styleClass: "ui-md-2")
		publishedInEvents
		//--
		
		cliente: refers Cliente? manyToOne
		web(styleClass: "ui-md-6")
		publishedInEvents
		
		numDocumento: string? 
		label: "Documento"
		grid(hidden) 
		web(styleClass: "ui-md-6")
		publishedInEvents
		
		///////
		// Begin conciliação bancária
		idConcBancaria: string? 
		label: "Id da conciliação bancária"
		grid(hidden) 
		web(styleClass: "ui-md-4" readOnly)
		listFilter(isNotNull: "Baixa via conc. banc." containerStyleClass: "ui-md-6")
		
		histConcBancaria: string?
		label: "Histórico da conciliação bancária"
		grid(hidden)
		web(styleClass: "ui-md-5" readOnly)
		listFilter(many: "Histórico da conciliação bancária" containerStyleClass: "ui-md-6")
		
		numDocConcBancaria: string? 
		label: "Documento da conciliação bancária"
		grid(hidden) 
		web(styleClass: "ui-md-3" readOnly)
		// End conciliação bancária
		///////////
		
		observacoes: string[1000]? 
		label: "Observações"
		grid(hidden) 
		web(styleClass: "ui-md-12") ///
		
		
		agrupador: string ? 
		label: "Identificador para agrupamento da conta"
		listFilter(many: "Agrupador:")
		grid(hidden) 
		web(styleClass: "ui-md-4")
		
		rules {///
			with(valorPago)
				.apply(equation(valor - valorDesconto + valorMulta + valorJuros + valorAcrescimos))
				.when(dataPagamento.isNotNull)
				
			with(grid.actions).apply(webActionsColumn{width: "14em"})
			
			with(contaBancaria).apply(styleClass:"hidden").when(formaPagamento.isNotEquals(FormaPagamento.CONTA_BANCARIA))
			with(cartaoCredito).apply(styleClass:"hidden").when(formaPagamento.isNotEquals(FormaPagamento.CARTAO_CREDITO))
			with(outrosDescricao).apply(styleClass:"hidden").when(formaPagamento.isEquals(FormaPagamento.CONTA_BANCARIA) or formaPagamento.isEquals(FormaPagamento.CARTAO_CREDITO) )
			
			with(idConcBancaria).apply(styleClass:"hidden").when(idConcBancaria.isNull)
			with(numDocConcBancaria).apply(styleClass:"hidden").when(numDocConcBancaria.isNull)
			with(histConcBancaria).apply(styleClass:"hidden").when(numDocConcBancaria.isNull)
			
			// Destaca o estado de vencimento das contas a receber.
			// Destaca as contas vencidas
			with(grid.rows).apply(styleClass: "kb-conta-vencida" label: "Conta vencida").when(dataPagamento.isNull and dataVencimento.isBefore(today))
			// Destaca as contas que vencem hoje
			with(grid.rows).apply(styleClass: "kb-conta-vence-hoje" label: "Conta vence hoje").when(dataPagamento.isNull and dataVencimento.isSame(today))
			// Destaca as contas que vencem amanhã
			with(grid.rows).apply(styleClass: "kb-conta-vence-amanha" label: "Conta vence amanhã").when(dataPagamento.isNull and dataVencimento.isSame(tomorrow))
			
			// Destaca as contas que vencem esta semana
			with(grid.rows).apply(styleClass: "kb-conta-vence-proximos-3-dias" label: "Conta vence nos próximos 3 dias").when(dataPagamento.isNull and dataVencimento.isBetween(today, nextDays(3)))
			
			// Destaca as contas que vencem esta semana
			with(grid.rows).apply(styleClass: "kb-conta-vence-esta-semana" label: "Conta vence esta semana").when(dataPagamento.isNull and dataVencimento.isBetween(today, endOfWeek))
			
			//Destaca as contas já pagas.
			with(grid.rows).apply(styleClass: "kb-conta-paga"  label: "Conta paga").when(dataPagamento.isNotNull)
		
			with(grid.sumRow.lastCell).apply(equation(valor - valorPago)) // xx
			
			// Action: Baixar conta com data de pagamento igual a data de hoje
			with(grid.actions)
			.apply(dataPagamento = today, valorPago = valor)
			.when(dataPagamento.isNull)
			.action(name: baixarContaComDataPagamentoHoje button(tooltip: "Baixar a conta com a data de pagamento igual a data de hoje" icon: "pi pi-clock"))
			
			// Action: Baixar conta com data de pagamento igual a data de vencimento
			with(grid.actions)
			.apply(dataPagamento = dataVencimento, valorPago = valor)
			.when(dataPagamento.isNull and dataVencimento.isBefore(today))
			.action(name: baixarContaComDataPagamentoIgualDataVenciento button(tooltip: "Baixar a conta com a data de pagamento igual a data de vencimento" icon: "pi pi-calendar"))
			
			// Action: Estorna conta baixada
			with(grid.actions)
			.apply(dataPagamento = null, valorPago = null)
			.when(dataPagamento.isNotNull)
			.action(name: estornarRecebimentoContaComUmClique button(tooltip: "Estornar recebimento da conta" icon: "pi pi-arrow-up"))
			
			with(form)
				.apply(makeCopies(title: "Gerar cópias da conta" referenceField: dataVencimento grouperField: agrupador))
				.action(name: fazerCopiasContaReceber button(tooltip: "Fazer cópias da conta" label: "Gerar cópias" icon: "pi pi-clone"))
			
		}
		
	}
	
	@externalEntity
	@subscribe(domain= cadastros, service=cliente, events=[created, updated, deleted])
	@label("Cliente")
	entity Cliente {
		
		tipoPessoa: TipoPessoa
		
		nome: string
		label: "Nome"
		listFilter(many: "Nome do cliente")
		
		cnpjCPF: string?
		label: "Documento (CNPJ/CPF)"		
		
	}
	
	@externalEntity
	@subscribe(domain= cadastros, service=banco, events=[created, updated, deleted])
	@label("Banco")
	entity Banco {
		
		numero: string[20] 
		label: "Número"
		autoComplete
		web(styleClass: "ui-md-4")
		
		nome: string 
		label: "Nome"
		autoComplete
		listFilter(many: "Nome do(s) banco(s)")
		web(styleClass: "ui-md-8")
	}
	
	@externalEntity
	@subscribe(domain= cadastros, service=banco, events=[cud])
	@label("Agência bancária")
	entity AgenciaBancaria {
		
		banco: refers Banco manyToOne
		web(styleClass: "ui-md-6")
		
		numeroAgencia: string[50] 
		autoComplete
		label: "Número da agência"
		web(styleClass: "ui-md-5")
		
		digitoAgencia: string[10] 
		autoComplete(result)
		label: "Dígito"
		web(styleClass: "ui-md-1")
		
		endereco: string? 
		autoComplete
		label: "Endereço/localização da agência"
		web(styleClass: "ui-md-6")
		
	}
	
	@externalEntity
	@subscribe(domain= cadastros, service=banco, events=[cud])
	@label("Bandeira de cartão")
	entity BandeiraCartao {
		
		nomeBandeira: string
		autoComplete
		label: "Bandeira do cartão"
		listFilter(many: "Bandeira(s)")
		web(styleClass: "ui-md-12")
	}
	
	@externalEntity
	@subscribe(domain= cadastros, service=banco, events=[cud])
	@label("Conta bancária")
	entity ContaBancaria {
		
		nomeTitular: string
		label: "Nome do títular da conta"
		autoComplete
		web(styleClass: "ui-md-6")
		
		agencia: refers AgenciaBancaria manyToOne
		web(styleClass: "ui-md-4")
		 findBy( ////
			custom: "findByNumeroContaAndAgenciaNumeroAgenciaAndAgenciaBancoNumero(String conta, String agencia, String banco)" 
			documentation: "Busca a conta bancária, pelo número da conta, número da agência e número o banco."
			)
		
		tipoContaBancaria: TipoContaBancaria
		label: "Tipo da conta"
		web(styleClass: "ui-md-2")
		//--
		
		numeroConta: string[30] 
		autoComplete(result)
		label: "Número da conta"
		listFilter(many: "Número da(s) conta(s)")
		web(styleClass: "ui-md-6")
		
		digito: string[10]? 
		label: "Dígito"
		web(styleClass: "ui-md-2")
		
		dataValidade: date?
		mask:"MM/yyyy"
		label: "Validade"
		web(styleClass: "ui-md-2")
		
		ativo: boolean
		label: "Conta ativa"
		web(styleClass: "ui-md-4")
		
	}
	
	@externalEntity
	@subscribe(domain= cadastros, service=banco, events=[cud])
	@label("Cartão de crédito")
	entity CartaoCredito {
		
		//--
		banco: refers Banco manyToOne
		web(styleClass: "ui-md-6")
		
		nomeTitular: string
		autoComplete
		label: "Nome do títular do cartão"
		web(styleClass: "ui-md-6")
		
		//--
		numeroCartao: string[50] 
		autoComplete
		label: "Número do cartão"
		web(styleClass: "ui-md-6")
		
		validade: date?
		label: "Validade"
		mask:"mm/yy"
		web(styleClass: "ui-md-2")
		
		valorLimite: money?
		label: "Limite de crédito"
		web(styleClass: "ui-md-2")
		
		//--
		bandeiraCartao: refers BandeiraCartao manyToOne
		label: "Bandeira do cartão"
		web(styleClass: "ui-md-6")
		
		ativo: boolean
		label: "Cartão ativo"
		web(styleClass: "ui-md-2")
		
	}
	
	@externalEntity
	@subscribe(domain= financeiro, service=plano_contas, events=[cud])
	@label("Plano de contas")
	entity PlanoConta {
		
		codigo: string
		label: "Código"
		autoComplete(data sort:asc)
		web(styleClass: "ui-md-2")
		listFilter(many: "Códigos")
		
		descricao: string
		label: "Descrição"
		autoComplete
		web(styleClass: "ui-md-10")		
		listFilter(many: "Descrições")
		
		tipoFinanceiro: TipoPlanoContaFinanceiro
		
		tipoReceitaDespesa: TipoReceitaDespesa?
		label: "Tipo receita/despesa"
		web(styleClass: "ui-md-2")
		
		planoContaPai: refers PlanoConta? manyToOne
		label: "Plano de conta pai"
		web(styleClass: "ui-md-7")
		
		ativo: boolean default: true // Will be replecated
		label: "Ativo"
		web(styleClass: "ui-md-1")
		listFilter(isNotNull_isNull: "Ativo;Inativo" default: "isNotNull")
		
		rules { // Somente aceita mensagem de DESPESA no contas a pagar.
			with(subscribe)
				.apply()
				.when(tipoFinanceiro.isEquals(TipoPlanoContaFinanceiro.RECEITA))
		}
		
	}
	
	@label("Forma de pagamento")
	enum FormaPagamento {
		DINHEIRO
		label: "Dinheiro"
		default
		
		CONTA_BANCARIA
		label: "Conta bancária"
		
		CARTAO_CREDITO
		label: "Cartão de crédito"
		
		VALE_REFEICAO
		label: "Vale refeição"
		
		VALE_ALIMENTACAO
		label: "Vale alimentação"
		
		CHEQUE
		label: "Cheque"
		
		OUTROS
		label: "Outros"
	}
	
	// From Plano de Contas
	@label("Tipo da receita/despesa")
	enum TipoReceitaDespesa {
		VARIAVEL
		label: "Variável"
		default
		
		FIXO
		label: "Fixa"
	}
	
	@label("Tipo da conta bancária")
	enum TipoContaBancaria { 
		CONTA_CORRENTE
		label: "Conta corrente"
		default
		
		CONTA_POUPANCA
		label: "Conta poupança"
		
		CONTA_SALARIO
		label: "Conta salário"
		
		CONTA_INVESTIMENTO
		label: "Conta investimento"
	}
	
	@label("Tipo financeiro")
	enum TipoPlanoContaFinanceiro {
		RECEITA
		label: "Receita"
		
		DESPESA
		label: "Despesa"
	}
	
	@label("Tipo da pessoa")
	enum TipoPessoa {		
		PESSOA_JURIDICA
		label: "Pessoa jurídica"
		default
		
		PESSOA_FISICA
		label: "Pessoa física"
	}
	
}